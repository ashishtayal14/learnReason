// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var y = [5];

y[0] = y[0] + 1 | 0;

console.log("-------------Let binding-----------");

console.log(y);

var fname = "Ashish";

var lname = "Tayal";

var fullname = "AshishTayal";

console.log("------------String and char--------");

console.log(fullname);

console.log(/* "M" */77);

var ashish = /* record */[
  /* name */"Ashish",
  /* gender : "M" */77,
  /* designation */"Senior Consultant",
  /* age */27,
  /* salary */1500000.00
];

ashish[/* name */0] = "Ashish Tayal";

var newAshish = /* record */[
  /* name */"Ashish Tayal",
  /* gender : "M" */77,
  /* designation */"Senior Consultant",
  /* age */27,
  /* salary */1500000.00
];

console.log("-------------Boolean---------------");

console.log(ashish === ashish);

console.log(ashish === newAshish);

console.log(Caml_obj.caml_equal(ashish, newAshish));

console.log(Caml_obj.caml_equal(ashish, ashish));

console.log(ashish[/* name */0].includes("Ashish"));

console.log("-------------Number-----------------");

console.log(10.1 + 10.2);

console.log(20);

console.log(0);

var myArr = /* array */[
  1,
  2,
  3
];

Caml_array.caml_array_set(myArr, 2, 5);

var myTuple = /* tuple */[
  "Ashish",
  27,
  /* "M" */77
];

var myList = /* :: */[
  1,
  /* :: */[
    2,
    /* :: */[
      3,
      /* [] */0
    ]
  ]
];

console.log("---------Array,Tuple,List-----------");

console.log(myArr);

console.log(myTuple);

console.log(myList);

var swift = /* record */[
  /* name */"Swift",
  /* color */"White",
  /* price */600000.0,
  /* brand */"Maruti"
];

var newSwift = /* record */[
  /* name */"Swift",
  /* color */"Grey",
  /* price */600000.0,
  /* brand */"Maruti"
];

console.log("-------------Record------------------");

console.log(swift === newSwift);

console.log(swift);

console.log("-------------Null-------------------");

console.log(/* None */0);

function printName(personRecord) {
  console.log(personRecord[/* name */0]);
  return "print complete";
}

console.log("-------------Function---------------");

console.log(printName(ashish));

function getFullName(firstName, middleName, lastName) {
  return "" + (String(firstName) + (" " + (String(middleName) + (" " + (String(lastName) + "")))));
}

console.log("-------------Currying---------------");

console.log(getFullName("Ashish", "Kumar", "Tayal"));

console.log(getFullName("Ashish", "Kumar", "Tayal"));

function getMessage(messageKey) {
  var switcher = messageKey - 1 | 0;
  if (switcher > 5 || switcher < 0) {
    return "no message";
  } else {
    switch (switcher) {
      case 0 : 
          return "Reason's pretty cool";
      case 1 : 
          return "good night";
      case 2 : 
          return "hello";
      case 3 : 
          return "hi";
      case 4 : 
          return "heya";
      case 5 : 
          return "hey";
      
    }
  }
}

var message = getMessage(2);

var reply;

switch (message) {
  case "Reason's pretty cool" : 
      reply = "Yep";
      break;
  case "good night" : 
      reply = "See ya!";
      break;
  case "hello" : 
  case "hey" : 
  case "heya" : 
  case "hi" : 
      reply = "hello to you too!";
      break;
  default:
    reply = "Nice to meet you!";
}

console.log("-------------Switch-----------------");

console.log(reply);

console.log(getMessage(1));

var name = ashish[/* name */0];

var age = ashish[/* age */3];

console.log("-------------Destructuring----------");

console.log(name);

console.log(age);

var n = ashish[/* name */0];

var a = ashish[/* age */3];

console.log(n);

console.log(a);

if (myArr.length !== 3) {
  throw [
        Caml_builtin_exceptions.match_failure,
        [
          "Syntax_Cheatsheet.re",
          126,
          4
        ]
      ];
} else {
  var first = myArr[0];
  var second = myArr[1];
  var third = myArr[2];
  console.log(first);
  console.log(second);
  console.log(third);
  var len = myArr.length;
  var first$1;
  if (len !== 3) {
    first$1 = len !== 0 ? 0 : 1;
  } else {
    var a$1 = myArr[0];
    var b = myArr[1];
    var c = myArr[2];
    first$1 = (a$1 + b | 0) + c | 0;
  }
  console.log(first$1);
  console.log("-------------Loops-----------------");
  for(var i = 1; i <= 5; ++i){
    console.log(i);
  }
  for(var i$1 = 5; i$1 >= 1; --i$1){
    console.log(i$1);
  }
  console.log("-------------Exceptions-------------");
  var SomeError = Caml_exceptions.create("Syntax_Cheatsheet-MyFirstApp.SomeError");
  try {
    throw [
          SomeError,
          "Custom Error"
        ];
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === SomeError) {
      console.log(exn[1]);
    } else {
      throw exn;
    }
  }
  var result;
  try {
    throw Caml_builtin_exceptions.not_found;
  }
  catch (exn$1){
    if (exn$1 === Caml_builtin_exceptions.not_found) {
      console.log("Not Found");
      result = /* () */0;
    } else {
      throw exn$1;
    }
  }
  console.log("----------------Blocks--------------");
  var res = 15;
  console.log(res);
  /* module */[
    /* x */5,
    /* y */y,
    /* fname */fname,
    /* lname */lname,
    /* gender : "M" */77,
    /* fullname */fullname,
    /* ashish */ashish,
    /* copyAshish */ashish,
    /* newAshish */newAshish,
    /* floatNum1 */10.1,
    /* floatNum2 */10.2,
    /* intNum1 */10,
    /* intNum2 */10,
    /* myArr */myArr,
    /* myTuple */myTuple,
    /* myList */myList,
    /* swift */swift,
    /* newSwift */newSwift,
    /* nullValue : None */0,
    /* printName */printName,
    /* getFullName */getFullName,
    /* getMessage */getMessage,
    /* message */message,
    /* reply */reply,
    /* name */name,
    /* age */age,
    /* n */n,
    /* a */a,
    /* second */second,
    /* third */third,
    /* first */first$1,
    /* SomeError */SomeError,
    /* result */result,
    /* res */res
  ];
}

/*  Not a pure module */
