// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';


function add(x, _) {
  if (x) {
    console.log(x[0]);
    return /* () */0;
  } else {
    console.log("Nothing");
    return /* () */0;
  }
}

add(/* Some */[1], /* Some */[1]);

function add$1(first, _) {
  if (first) {
    console.log(first[0]);
  } else {
    console.log("Nothing");
  }
  return 1;
}

add$1(/* Some */[1], /* Some */[2]);

add$1(/* Some */[1], /* Some */[2]);

function drawCircle(_, radius, _$1) {
  if (radius) {
    return radius[0];
  } else {
    return /* () */0;
  }
}

var color = "red";

function whatIsThis(param, param$1) {
  return drawCircle(color, param, param$1);
}

function curriedFunction(param, param$1) {
  return drawCircle(color, param, param$1);
}

function logSomething() {
  console.log("hello");
  console.log("world");
  return /* () */0;
}

logSomething(/* () */0);

function drawCircle$1(color, radius, _) {
  if (radius) {
    return color + radius[0];
  } else {
    return color;
  }
}

function getResult(payloadRadius) {
  drawCircle$1("blue", payloadRadius, /* () */0);
  return /* () */0;
}

function neverTerminate(_param) {
  while(true) {
    _param = /* () */0;
    continue ;
  };
}

function callSecond(_param) {
  while(true) {
    _param = /* () */0;
    continue ;
  };
}

function callFirst(_param) {
  while(true) {
    _param = /* () */0;
    continue ;
  };
}

function newFunc(first, _) {
  if (first) {
    console.log(first[0]);
  } else {
    console.log("Didnot get the first value");
  }
  return 1;
}

newFunc(/* Some */[1], /* Some */[2]);

var actualResultWithoutProvidingRadius = /* () */0;

exports.add = add$1;
exports.color = color;
exports.whatIsThis = whatIsThis;
exports.curriedFunction = curriedFunction;
exports.actualResultWithoutProvidingRadius = actualResultWithoutProvidingRadius;
exports.logSomething = logSomething;
exports.drawCircle = drawCircle$1;
exports.getResult = getResult;
exports.neverTerminate = neverTerminate;
exports.callSecond = callSecond;
exports.callFirst = callFirst;
exports.newFunc = newFunc;
/*  Not a pure module */
