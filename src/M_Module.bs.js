// Generated by BUCKLESCRIPT VERSION 3.1.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

function getProfession(person) {
  if (person) {
    return "A director";
  } else {
    return "A teacher";
  }
}

var School = /* module */[
  /* person1 : Teacher */0,
  /* getProfession */getProfession
];

console.log("A teacher");

var NestedModule = /* module */[/* message */"hello"];

var MyModule = /* module */[/* NestedModule */NestedModule];

var message = "Hello teacher!";

console.log("A teacher");

function getAudience(excited) {
  if (excited) {
    return "world!";
  } else {
    return "world";
  }
}

var BaseComponent = /* module */[
  /* defaultGreeting */"Hello",
  /* getAudience */getAudience
];

var defaultGreeting = "Hey";

function render() {
  return "Hey world!";
}

var ActualComponent = /* module */[
  /* getAudience */getAudience,
  /* defaultGreeting */defaultGreeting,
  /* render */render
];

function getProfession$1() {
  return "";
}

var Company = /* module */[/* getProfession */getProfession$1];

function MakeSet(Item) {
  var add = function (currentSet, newItem) {
    if (List.exists((function (x) {
              return Curry._2(Item[/* equal */0], x, newItem);
            }), currentSet)) {
      return currentSet;
    } else {
      return /* :: */[
              newItem,
              currentSet
            ];
    }
  };
  return /* module */[
          /* empty : [] */0,
          /* add */add
        ];
}

function equal(param, param$1) {
  if (Caml_obj.caml_equal(param[0], param$1[0])) {
    return Caml_obj.caml_equal(param[1], param$1[1]);
  } else {
    return false;
  }
}

function create(x, y) {
  return /* tuple */[
          x,
          y
        ];
}

var IntPair = /* module */[
  /* equal */equal,
  /* create */create
];

function add(currentSet, newItem) {
  if (List.exists((function (x) {
            return equal(x, newItem);
          }), currentSet)) {
    return currentSet;
  } else {
    return /* :: */[
            newItem,
            currentSet
          ];
  }
}

var SetOfIntPairs = /* module */[
  /* empty : [] */0,
  /* add */add
];

var anotherPerson = /* Teacher */0;

exports.School = School;
exports.MyModule = MyModule;
exports.message = message;
exports.anotherPerson = anotherPerson;
exports.BaseComponent = BaseComponent;
exports.ActualComponent = ActualComponent;
exports.Company = Company;
exports.MakeSet = MakeSet;
exports.IntPair = IntPair;
exports.SetOfIntPairs = SetOfIntPairs;
/*  Not a pure module */
